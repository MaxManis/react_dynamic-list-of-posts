{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onPostSelect","selectedPost","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","postId","comments","setComments","useState","commentName","setCommentName","isError","setIsError","isAdding","setIsAdding","commentEmail","setCommentEmail","commentBody","setCommentBody","onAddComment","a","newComment","name","email","result","onSubmit","e","preventDefault","htmlFor","placeholder","classNames","value","onChange","target","PostDetails","isLoading","setIsLoading","isFormOpened","setIsFormOpened","DeletingComment","setDeletingComment","getComments","onCommentDelete","comment","commentId","filter","commentItem","useEffect","length","href","UserSelector","users","selectedUser","onSelectUser","isSelectorOpen","setIsSelectorOpen","role","user","event","App","setSelectedUser","setSelectedPost","allUsers","setAllUsers","allPosts","setAllPosts","postsLoadingError","setPostsLoadingError","userId","onSelectPost","catch","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0929a94a.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  onPostSelect: (post: Post | null) => void,\n  selectedPost: Post | null,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onPostSelect,\n  selectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => {\n          return (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPost === post ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => {\n                      onPostSelect(null);\n                    }}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => {\n                      onPostSelect(post);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n);\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n\nexport function getAllUsers() {\n  return client.get<User[]>('/users');\n}\n\nexport function getAllPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n\nexport function getAllComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function deleteComment(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n\nexport function addNewComment(commentData: Comment) {\n  return client.post<Comment>('/comments', commentData);\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n//\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { addNewComment } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  postId: number,\n  comments: Comment[],\n  setComments: (newComments: Comment[]) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  comments,\n  setComments,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [isAdding, setIsAdding] = useState(false);\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const resetForm = () => {\n    setCommentName('');\n    setCommentEmail('');\n    setCommentBody('');\n  };\n\n  const validate = () => {\n    if (!commentName || !commentEmail || !commentBody) {\n      setIsError(true);\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const onAddComment = async () => {\n    if (!validate()) {\n      return;\n    }\n\n    setIsAdding(true);\n    setIsError(false);\n\n    try {\n      const newComment = {\n        id: 0,\n        postId,\n        name: commentName,\n        email: commentEmail,\n        body: commentBody,\n      };\n\n      const result = await addNewComment(newComment);\n\n      setComments([...comments, result]);\n    } catch (e) {\n      setIsError(true);\n    }\n\n    setCommentBody('');\n    setIsAdding(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        onAddComment();\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': isError && !commentName,\n            })}\n            value={commentName}\n            onChange={(e) => setCommentName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isError && !commentName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isError && !commentName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': isError && !commentEmail,\n            })}\n            value={commentEmail}\n            onChange={(e) => setCommentEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            {isError && !commentEmail && (\n              <i className=\"fas fa-exclamation-triangle\" />\n            )}\n          </span>\n\n        </div>\n\n        {isError && !commentEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': isError && !commentBody,\n            })}\n            value={commentBody}\n            onChange={(e) => setCommentBody(e.target.value)}\n          />\n        </div>\n\n        {isError && !commentBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isAdding,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getAllComments } from '../utils/fetchClient';\n\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isFormOpened, setIsFormOpened] = useState(false);\n  const [DeletingComment, setDeletingComment] = useState<Comment | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const getComments = async () => {\n    if (!post) {\n      return;\n    }\n\n    setIsLoading(true);\n    setIsError(false);\n\n    try {\n      const response = await getAllComments(post.id);\n\n      setComments(response);\n    } catch (e) {\n      setIsError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  const onCommentDelete = async (comment: Comment) => {\n    setDeletingComment(comment);\n\n    try {\n      await deleteComment(comment?.id);\n\n      setComments(comments\n        .filter(commentItem => commentItem.id !== comment.id));\n    } catch (e) {\n      setIsError(true);\n    }\n\n    setDeletingComment(null);\n  };\n\n  useEffect(() => {\n    getComments();\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {!isLoading && isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoading && comments.length === 0 && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {!isLoading && comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => {\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${comment.email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => onCommentDelete(comment)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      { DeletingComment?.id === comment.id\n                        ? (\n                          <Loader />\n                        ) : comment.body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          )}\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setIsFormOpened(!isFormOpened)}\n          >\n            {isFormOpened ? ('Discard comment') : ('Write a comment')}\n          </button>\n        </div>\n\n        {isFormOpened && post && (\n          <NewCommentForm\n            postId={post.id}\n            comments={comments}\n            setComments={setComments}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\n// <article className=\"message is-small\" data-cy=\"Comment\">\n//   <div className=\"message-header\">\n//     <a\n//       href=\"mailto:misha@mate.academy\"\n//       data-cy=\"CommentAuthor\"\n//     >\n//       Misha Hrynko\n//     </a>\n//\n//     <button\n//       data-cy=\"CommentDelete\"\n//       type=\"button\"\n//       className=\"delete is-small\"\n//       aria-label=\"delete\"\n//     >\n//       delete button\n//     </button>\n//   </div>\n//   <div\n//     className=\"message-body\"\n//     data-cy=\"CommentBody\"\n//   >\n//     One more comment\n//   </div>\n// </article>\n//\n// <article className=\"message is-small\" data-cy=\"Comment\">\n//   <div className=\"message-header\">\n//     <a\n//       href=\"mailto:misha@mate.academy\"\n//       data-cy=\"CommentAuthor\"\n//     >\n//       Misha Hrynko\n//     </a>\n//\n//     <button\n//       data-cy=\"CommentDelete\"\n//       type=\"button\"\n//       className=\"delete is-small\"\n//       aria-label=\"delete\"\n//     >\n//       delete button\n//     </button>\n//   </div>\n//\n//   <div className=\"message-body\" data-cy=\"CommentBody\">\n//     {'Multi\\nline\\ncomment'}\n//   </div>\n// </article>\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  onSelectUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSelectUser,\n}) => {\n  const [isSelectorOpen, setIsSelectorOpen] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsSelectorOpen(!isSelectorOpen)}\n        >\n          <span>{selectedUser ? (selectedUser.name) : ('Choose a user')}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isSelectorOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href={`#user${user.id}`}\n                  className={classNames('dropdown-item', {\n                    'is-active': selectedUser?.id === user.id,\n                  })}\n                  onClick={(event => {\n                    event.preventDefault();\n                    setIsSelectorOpen(false);\n                    onSelectUser(user);\n                  })}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getAllPosts, getAllUsers } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n  const [allPosts, setAllPosts] = useState<Post[]>([]);\n  const [postsLoadingError, setPostsLoadingError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSelectUser = async (user: User) => {\n    setSelectedUser(user);\n    setIsLoading(true);\n\n    try {\n      const posts = await getAllPosts(user.id);\n\n      setAllPosts(posts);\n    } catch (e) {\n      setPostsLoadingError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  const onSelectPost = async (post: Post | null) => {\n    setSelectedPost(post);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getAllUsers()\n      .then((result: User[]) => {\n        setAllUsers(result);\n      })\n      .catch(() => {\n        setPostsLoadingError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={allUsers}\n                  selectedUser={selectedUser}\n                  onSelectUser={onSelectUser}\n                />\n\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <p data-cy=\"NoSelectedUser\">\n                  {selectedUser ? selectedUser.name : 'No user selected'}\n                </p>\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {!isLoading && postsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isLoading && selectedUser && allPosts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!isLoading && selectedUser && allPosts.length > 0 && (\n                  <PostsList\n                    posts={allPosts}\n                    onPostSelect={onSelectPost}\n                    selectedPost={selectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                post={selectedPost}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n//\n"],"sourceRoot":""}